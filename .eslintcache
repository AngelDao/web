[{"/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/index.tsx":"1","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/App.tsx":"2","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/hooks/useDoc.tsx":"3","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/components/DocInputForm.tsx":"4","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/theme.tsx":"5","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/components/ColorModeSwitcher.tsx":"6"},{"size":1067,"mtime":1612784556365,"results":"7","hashOfConfig":"8"},{"size":10674,"mtime":1612785588194,"results":"9","hashOfConfig":"8"},{"size":841,"mtime":1612537033413,"results":"10","hashOfConfig":"8"},{"size":1721,"mtime":1612785474960,"results":"11","hashOfConfig":"8"},{"size":208,"mtime":1612784574467,"results":"12","hashOfConfig":"8"},{"size":648,"mtime":1612785076801,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1befx0z",{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/index.tsx",[],["29","30"],"/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/App.tsx",["31","32","33","34","35","36","37"],"import CeramicClient from '@ceramicnetwork/http-client'\nimport {\n  Box,\n  Button,\n  ChakraProvider,\n  ColorModeScript,\n  DarkMode,\n  Divider,\n  Flex,\n  Heading,\n  Link,\n  Select,\n  SimpleGrid,\n  Skeleton,\n  Stack,\n  Text,\n  useColorMode,\n  useColorModeValue,\n  useDisclosure,\n} from '@chakra-ui/react'\nimport { navigate, RouteComponentProps } from '@reach/router'\nimport * as React from 'react'\nimport { GiAtom } from 'react-icons/gi'\nimport DocInputForm from './components/DocInputForm'\nimport useDoc from './hooks/useDoc'\nimport theme from './theme'\nimport ColorModeSwitcher from './components/ColorModeSwitcher'\n\nconst API_URL = 'https://gateway-clay.ceramic.network'\nexport const ceramic = new CeramicClient(API_URL)\n\ninterface AppProps extends RouteComponentProps {\n  docId?: string\n}\n\nexport const App = (props: AppProps) => {\n  const { docId } = props\n  const { isLoading, error, data: doc } = useDoc(docId)\n  const { isOpen, onToggle } = useDisclosure({ defaultIsOpen: true })\n  const { colorMode } = useColorMode()\n  // const text = useColorModeValue('white', 'white')\n\n  const formatAnchorStatus = (anchorStatus: number) => {\n    switch (anchorStatus) {\n      case 0:\n        return 'NOT_REQUESTED (0)'\n      case 1:\n        return 'PENDING (1)'\n      case 2:\n        return 'PROCESSING (2)'\n      case 3:\n        return 'ANCHORED (3)'\n      case 4:\n        return 'FAILED (4)'\n      default:\n        break\n    }\n  }\n  return (\n    <>\n      <Flex\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        px={6}\n        py={6}\n        borderBottomWidth={1}\n      >\n        <a href=\"https://mechanaut.xyz\">\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <GiAtom />\n            <Heading ml={1} size=\"md\">\n              Mechanaut\n            </Heading>\n          </Flex>\n        </a>\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\n      </Flex>\n      <Box px={6} py={6}>\n        <Heading mb={6} size=\"lg\">\n          Ceramic Document Viewer\n        </Heading>\n        {isOpen ? (\n          <Box borderRadius={5} borderWidth={1} p={6} mb={6}>\n            <Flex alignItems=\"center\" wrap=\"wrap\" mb={6}>\n              <Heading size=\"md\">Sample Documents</Heading>\n              <Divider orientation=\"vertical\" mx={3} />\n              <Button onClick={onToggle} size=\"xs\">\n                Hide\n              </Button>\n            </Flex>\n            <Stack direction={{ base: 'column', lg: 'row' }} spacing=\"3\">\n              <Box\n                p={3}\n                borderRadius={5}\n                onClick={() =>\n                  navigate(\n                    `/document/k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io`\n                  )\n                }\n                borderWidth={3}\n                borderColor={\n                  docId ===\n                  'k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io'\n                    ? '#f0580e'\n                    : 'gray.600'\n                }\n              >\n                <Text fontWeight=\"bold\" mb={3} fontSize=\"lg\">\n                  Basic Profile Schema\n                </Text>\n                <Text isTruncated={true} mb={3}>\n                  k3y52l7qbv1frxjdr9â€¦azw9j4txf4o6d2io\n                </Text>\n                {docId ===\n                'k3y52l7qbv1frxjdr9qpn9ldvbxb0jg4eig7wtjkdu6gk84vyazw9j4txf4o6d2io' ? (\n                  <Text fontStyle=\"italic\" color=\"#f0580e\">\n                    Viewing\n                  </Text>\n                ) : (\n                  <Button size=\"sm\">View</Button>\n                )}\n              </Box>\n              <Box\n                p={3}\n                borderRadius={5}\n                onClick={() =>\n                  navigate(\n                    `/document/kjzl6cwe1jw14bek5i7rcr1q9byw61w4rswrhmvja0kfos89ty0notx0vh7kx3b`\n                  )\n                }\n                borderWidth={3}\n                borderColor={\n                  docId ===\n                  'kjzl6cwe1jw14bek5i7rcr1q9byw61w4rswrhmvja0kfos89ty0notx0vh7kx3b'\n                    ? '#f0580e'\n                    : 'gray.600'\n                }\n              >\n                <Text fontWeight=\"bold\" mb={3} fontSize=\"lg\">\n                  Crypto Accounts Definition\n                </Text>\n                <Text isTruncated={true} mb={3}>\n                  kjzl6cwe1jw14bek5iâ€¦fos89ty0notx0vh7kx3b\n                </Text>\n                {docId ===\n                'kjzl6cwe1jw14bek5i7rcr1q9byw61w4rswrhmvja0kfos89ty0notx0vh7kx3b' ? (\n                  <Text fontStyle=\"italic\" color=\"#f0580e\">\n                    Viewing\n                  </Text>\n                ) : (\n                  <Button size=\"sm\">View</Button>\n                )}\n              </Box>\n              <Box\n                p={3}\n                borderRadius={5}\n                onClick={() =>\n                  navigate(\n                    `/document/kjzl6cwe1jw14anzfvjyint54cf2m7lb04xnsmsdem9emhvgn816hzecvzqa65g`\n                  )\n                }\n                borderWidth={3}\n                borderColor={\n                  docId ===\n                  'kjzl6cwe1jw14anzfvjyint54cf2m7lb04xnsmsdem9emhvgn816hzecvzqa65g'\n                    ? '#f0580e'\n                    : 'gray.600'\n                }\n              >\n                <Text fontWeight=\"bold\" mb={3} fontSize=\"lg\">\n                  User Profile\n                </Text>\n                <Text isTruncated={true} mb={3}>\n                  kjzl6cwe1jw14anzfâ€¦hvgn816hzecvzqa65g\n                </Text>\n                {docId ===\n                'kjzl6cwe1jw14anzfvjyint54cf2m7lb04xnsmsdem9emhvgn816hzecvzqa65g' ? (\n                  <Text fontStyle=\"italic\" color=\"#f0580e\">\n                    Viewing\n                  </Text>\n                ) : (\n                  <Button size=\"sm\">View</Button>\n                )}\n              </Box>\n            </Stack>\n          </Box>\n        ) : (\n          <Button onClick={onToggle} size=\"sm\" mb={6}>\n            Show Sample Documents\n          </Button>\n        )}\n        <DocInputForm docId={docId} isLoading={isLoading} />\n        {error ? (\n          <Text mb={6}>ðŸš¨ Something's wrong â€“ try another document</Text>\n        ) : (\n          <>\n            <Box mb={6}>\n              <Heading size=\"md\" mb={3}>\n                Content\n              </Heading>\n              {doc?.state?.content ? (\n                Object.entries(doc?.state?.content).map((entry: any[]) => (\n                  <Box mb={3}>\n                    <Text mb={1} fontWeight=\"bold\">\n                      {entry[0] && entry[0].toString()}\n                    </Text>\n                    {typeof entry[1] === 'string' ? (\n                      <Text>{entry[1]}</Text>\n                    ) : (\n                      <Box\n                        backgroundColor={\n                          colorMode === 'dark' ? 'gray.900' : 'gray.100'\n                        }\n                        p={3}\n                        borderRadius={5}\n                      >\n                        <pre>{JSON.stringify(entry[1], undefined, 2)}</pre>\n                      </Box>\n                    )}\n                  </Box>\n                ))\n              ) : (\n                <>\n                  {isLoading ? (\n                    <Skeleton height=\"20px\" width={400} />\n                  ) : (\n                    <Text>Get a document to see its content</Text>\n                  )}\n                </>\n              )}\n            </Box>\n            <Divider my={6} />\n            <Box mb={6}>\n              <Heading mb={3} size=\"md\">\n                Metadata\n              </Heading>\n              {doc?.state?.metadata ? (\n                Object.entries(doc?.state?.metadata).map((entry: any[]) => (\n                  <Box mb={3}>\n                    <Text fontWeight=\"bold\" mb={3}>\n                      {entry[0] && entry[0].toString()}\n                    </Text>\n                    <Text>{entry[1] && entry[1].toString()}</Text>\n                  </Box>\n                ))\n              ) : (\n                <>\n                  {isLoading ? (\n                    <Skeleton height=\"20px\" width={400} />\n                  ) : (\n                    <Text>Get a document to see its metadata</Text>\n                  )}\n                </>\n              )}\n            </Box>\n            <Divider my={6} />\n            <Box mb={6}>\n              <Heading mb={3} size=\"md\">\n                Anchoring\n              </Heading>\n              <Box mb={3}>\n                <Text fontWeight=\"bold\" mb={3}>\n                  Status\n                </Text>\n                <Text>\n                  {doc?.state?.anchorStatus &&\n                    formatAnchorStatus(doc?.state?.anchorStatus)}\n                </Text>\n              </Box>\n              <Box mb={3}>\n                <Text fontWeight=\"bold\">Block Number</Text>\n                <Text>{doc?.state?.anchorProof?.blockNumber}</Text>\n              </Box>\n              <Box mb={3}>\n                <Text fontWeight=\"bold\">Block Timestamp</Text>\n                <Text>{doc?.state?.anchorProof?.blockTimestamp}</Text>\n              </Box>\n              <Box mb={3}>\n                <Text fontWeight=\"bold\">Chain Id</Text>\n                <Text>{doc?.state?.anchorProof?.chainId}</Text>\n              </Box>\n            </Box>\n          </>\n        )}\n        {/* {doc && (\n          <Flex mb={6} alignItems=\"center\">\n            <Text mr={3}>Version</Text>\n            <Select\n              onChange={(e: any) => {\n                navigate(`/document/${e.target.value}`)\n              }}\n              width={200}\n            >\n              {doc?.allCommitIds?.map((commitId: any, i: number) => (\n                <option key={i} value={commitId}>\n                  Version {i + 1}\n                </option>\n              ))}\n            </Select>\n          </Flex>\n        )} */}\n      </Box>\n      <Flex\n        my={6}\n        borderTopWidth={1}\n        px={6}\n        py={6}\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n      >\n        <Text mr={6}>\n          Made by{' '}\n          <Link\n            textDecoration=\"underline\"\n            href=\"https://twitter.com/tannedoaksprout\"\n          >\n            oaksprout\n          </Link>{' '}\n          in support of{' '}\n          <Link href=\"https://ceramic.network\" textDecoration=\"underline\">\n            Ceramic\n          </Link>\n        </Text>\n        <a href=\"https://mechanaut.xyz\">\n          <Flex alignItems=\"center\">\n            <GiAtom />\n            <Heading ml={1} size=\"md\">\n              Mechanaut\n            </Heading>\n          </Flex>\n        </a>\n      </Flex>\n    </>\n  )\n}\n","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/hooks/useDoc.tsx",[],"/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/components/DocInputForm.tsx",["38"],"// import * as React from 'react';\n\n// const DocInputForm = () => {\n//   return (\n//     <Flex mb={6} alignItems=\"center\" wrap=\"wrap\">\n//       <Input\n//         onChange={(e: any) => handleDocIdInput(e.target.value)}\n//         width={600}\n//         mr={3}\n//         placeholder=\"e.g. kjzl6cwe1jw147c4oeqx7mp9ov3zzp3t7qewn7gjximydwwxearw4lyxg8ig382\"\n//         value={docIdInput}\n//       />\n//       <Button onClick={() => getDoc(docIdInput)}>Get Document</Button>\n//     </Flex>\n//   )\n// }\n\n// export default DocInputForm;\n\nimport { Button, Flex, Input, useColorMode } from '@chakra-ui/react'\nimport { navigate } from '@reach/router'\nimport React from 'react'\nimport { useForm } from 'react-hook-form'\n\nconst DocInputForm = (props: any) => {\n  const { docId, isLoading } = props\n  const { handleSubmit, register, errors } = useForm({\n    defaultValues: { docId: docId.toString() },\n  })\n  const onSubmit = (values: any) => navigate(`/document/${values.docId}`)\n  const { colorMode } = useColorMode()\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Flex alignItems=\"center\" mb={6} wrap=\"wrap\">\n        <Input\n          size=\"lg\"\n          name=\"docId\"\n          ref={register()}\n          width={630}\n          mr={3}\n          mb={3}\n        />\n        {errors.docId && errors.docId.message}\n        <Button\n          type=\"submit\"\n          disabled={isLoading}\n          mb={3}\n          size=\"lg\"\n          color=\"white\"\n          bgGradient=\"linear(to-r, gray.600, gray.500)\"\n          _hover={{\n            bgColor: 'rgb(255, 153, 103)',\n          }}\n        >\n          {isLoading ? 'Loadingâ€¦' : 'Get Document'}\n        </Button>\n      </Flex>\n    </form>\n  )\n}\n\nexport default DocInputForm\n","/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/theme.tsx",[],"/Users/jaybowles/Repositories/experiments/ceramic-document-viewer/src/components/ColorModeSwitcher.tsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":5,"column":3,"nodeType":"45","messageId":"46","endLine":5,"endColumn":17},{"ruleId":"43","severity":1,"message":"47","line":6,"column":3,"nodeType":"45","messageId":"46","endLine":6,"endColumn":18},{"ruleId":"43","severity":1,"message":"48","line":7,"column":3,"nodeType":"45","messageId":"46","endLine":7,"endColumn":11},{"ruleId":"43","severity":1,"message":"49","line":12,"column":3,"nodeType":"45","messageId":"46","endLine":12,"endColumn":9},{"ruleId":"43","severity":1,"message":"50","line":13,"column":3,"nodeType":"45","messageId":"46","endLine":13,"endColumn":13},{"ruleId":"43","severity":1,"message":"51","line":18,"column":3,"nodeType":"45","messageId":"46","endLine":18,"endColumn":20},{"ruleId":"43","severity":1,"message":"52","line":26,"column":8,"nodeType":"45","messageId":"46","endLine":26,"endColumn":13},{"ruleId":"43","severity":1,"message":"53","line":31,"column":11,"nodeType":"45","messageId":"46","endLine":31,"endColumn":20},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"@typescript-eslint/no-unused-vars","'ChakraProvider' is defined but never used.","Identifier","unusedVar","'ColorModeScript' is defined but never used.","'DarkMode' is defined but never used.","'Select' is defined but never used.","'SimpleGrid' is defined but never used.","'useColorModeValue' is defined but never used.","'theme' is defined but never used.","'colorMode' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]